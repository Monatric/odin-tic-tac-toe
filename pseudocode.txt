What should be a class?
- the Game
    this represents the TTT. It gets instantiated when the user decides to play

  What should be its instance variables?
    initialize an instance variable of @is_game_finished = false, which will be set to true later if it's won or drawn

    initialize player_1_pts and player_2_pts to 0 (or maybe not)
    maybe player_1 = "Player 1" and player_2 = "Player 2"
    next_turn = @player_1

    initialize the board as a 2 dimensional array, which turns like [[x, y], [x, y], [x, y]]
    or [
        [0, 0], [0, 1], [0, 2], 
        [1, 0], [1, 1], [1, 2],
        [2, 0], [2, 1], [2, 2]
      ] (come back later)

  the possible combinations for a win:
    012 (hor)
    345 (hor)
    678 (hor)
    048 (dia)
    246 (dia)
    036 (ver)
    147 (ver)
    258 (ver)

  make a constant for the coords of  the board

  What should be the methods?
    private
      one that takes user input. It provides a guide on how to make a turn.
        In this case, we will output a sample board at the side, each part of the grid containing a number representing its coordinates like so:
         1 | 2 | 3
        ___|___|___
         4 | 5 | 6
        ___|___|___
         7 | 8 | 9
           |   |
        Then tells the user to type a number.
        Use begin rescue to catch unwanted character
        The typed number will call the method for checking the coordinates

      one that sets is_game_finished to true, asking for another round, and if yes then set to false again, otherwise just end the session

      one that is for the coordinates of the board
        When the program receives the number, it checks this:
        [
          [1], [2], [3], 
          [4], [5], [6],
          [7], [8], [9]
        ]
        
        If it's empty, enter the letter
        If it's taken, show retry again

      one that checks if the winning combination is met by checking if one combination has the same three letters
        Use a case statement
        (get back on this later. Try to run the game first)

      one for player 1 and 2, each with their corresponding letter

      one that starts the game and I/O
        then a do while loop that checks the winning combination
        then check next_turn


inside the main.rb
  instantiate the game
  then run it (call)

test3.values_at(0,1,2).join.squeeze == "X"



irb(main):074* sample = case
irb(main):075* when test3.values_at(0,1,2).join.squeeze ==  "X"
irb(main):076*   puts "WIN"
irb(main):077* else
irb(main):078*   puts "what"
irb(main):079> end



###
or
        [
          [0, 1, 2], 
          [0, 1, 2], 
          [0, 1, 2], 
        ]

        Basically:
        1 = [0][0]
        2 = [0][1]
        3 = [0][2]
        and so on